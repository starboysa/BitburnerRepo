let GITHUB_USERNAME = "starboysa"
let GITHUB_REPONAME = "BitburnerRepo"
let GITHUB_BRANCHNAME = "main"
let GITHUB_API_STR = "https://api.github.com/repos/" + GITHUB_USERNAME + "/" + GITHUB_REPONAME + "/commits/" + GITHUB_BRANCHNAME

let REPO_PLAINTEXT_PREFIX = "https://raw.githubusercontent.com/" + GITHUB_USERNAME + "/" + GITHUB_REPONAME + "/" + GITHUB_BRANCHNAME + "/"
let GRAB_FILE = "grab.txt"

let LATEST_SHA_FILE = "current_sha.txt";

function isWS(c) {
    return c == '\n' || c == ' ' || c == '\t' || c == '\r';
}

function grabParser(grabData) {
    // STATE MACHINE:
    // 0: ANY
    // 1: PARSING FILE NAME
    let state = 0;
    let filenameInProgress = "";
    let filenames = [];

    for (let i = 0; i < grabData.length; ++i) {
        let c = grabData[i];

        if (state == 0) {
            if (!isWS(c)) {
                state = 1;
                i -= 1;
            }
        } else if (state == 1) {
            if (isWS(c)) {
                filenames[filenames.length] = filenameInProgress;
                filenameInProgress = "";
                state = 0;
            } else {
                filenameInProgress += c;
            }
        }
    }

    return filenames;
}

async function toFile(ns, filename, url) {
    await ns.write(filename, "w");
    await ns.wget(url, filename);
}

async function getRepoInfo(ns, cb) {
    let SHA_FILENAME = "githubLatestSHA.txt";
    await toFile(ns, SHA_FILENAME, GITHUB_API_STR);

    let apiResponse = ns.read(SHA_FILENAME);

    let shaStr = "";
    for (let i = 12; i < (12 + 40); ++i) {
        shaStr += apiResponse[i]
    }

    ns.toast("Grabbing commit " + shaStr);
    await ns.rm(SHA_FILENAME);
    await cb(ns, shaStr);
}

async function rawFromGithub(ns, filename, commitSha) {
    let githackURL = "https://rawcdn.githack.com/" + GITHUB_USERNAME + "/" + GITHUB_REPONAME + "/" + commitSha + "/" + filename;
    await toFile(ns, filename, githackURL);
}

async function cloneGithubRepo_impl(ns, shaStr) {
    await rawFromGithub(ns, GRAB_FILE, shaStr);
    if (ns.fileExists(GRAB_FILE)) {
        let grabFile = ns.read(GRAB_FILE);
        let filenames = grabParser(grabFile);

        ns.print("Filenames parsed");
        for (let i = 0; i < filenames.length; ++i) {
            ns.print("Grabbing " + filenames[i]);
            await rawFromGithub(ns, filenames[i], shaStr);

            if (!ns.fileExists(filenames[i])) {
                ns.print("Failed to grab " + filenames[i]);
            }
        }

        await ns.rm(GRAB_FILE);
    } else {
        ns.print("Couldn't find grab file");
    }
}

async function shaStrRecusion(ns, latestSha, count, totalCount) {
    await getRepoInfo(ns, async function(ns, shaStr) {
        if (latestSha === shaStr) {
            ns.toast("No new changes found... (" + count + " / " + totalCount + ")");
            if (count >= totalCount) {
                ns.toast("Couldn't detect changes, aborting...");
            } else {
                await shaStrRecusion(ns, latestSha, count+1, totalCount);
            }
        } else {
            await ns.write(LATEST_SHA_FILE, shaStr, "w");
            await cloneGithubRepo_impl(ns, shaStr);
        }
    });
}

// Could probably factor the general struc
async function cloneGithubRepo(ns) {
    if (ns.fileExists(LATEST_SHA_FILE)) {
        let latestSha = ns.read(LATEST_SHA_FILE);
        await shaStrRecusion(ns, latestSha, 0, 5);
    } else {
        await shaStrRecusion(ns, "", 0, 0);
    }
}

async function rawFromGithubSlow(ns, filename) {
    await toFile(ns, filename, REPO_PLAINTEXT_PREFIX + filename);
}

async function cloneGithubRepoSlow(ns) {
    await rawFromGithubSlow(ns, GRAB_FILE);
    if (ns.fileExists(GRAB_FILE)) {
        ns.print("Got grab file!");
        let grabFile = ns.read(GRAB_FILE);
        let filenames = grabParser(grabFile);

        ns.print("Filenames parsed:");
        for (let i = 0; i < filenames.length; ++i) {
            ns.print(filenames[i]);

            await rawFromGithubSlow(ns, filenames[i]);
        }

        await ns.rm(GRAB_FILE);
    }
}

/** @param {NS} ns **/
export async function main(ns) {
    await cloneGithubRepo(ns);
}