let GITHUB_USERNAME = "starboysa"
let GITHUB_REPONAME = "BitburnerRepo"
let GITHUB_BRANCHNAME = "main"
let GITHUB_API_STR = "https://api.github.com/repos/" + GITHUB_USERNAME + "/" + GITHUB_REPONAME + "/commits/" + GITHUB_BRANCHNAME

let REPO_PLAINTEXT_PREFIX = "https://raw.githubusercontent.com/starboysa/BitburnerRepo/main/"
let GRAB_FILE = "grab.txt"

function isWS(c) {
    return c == '\n' || c == ' ' || c == '\t';
}

function grabParser(grabData) {
    // STATE MACHINE:
    // 0: ANY
    // 1: PARSING FILE NAME
    let state = 0;
    let filenameInProgress = "";
    let filenames = [];

    for (let i = 0; i < grabData.length; ++i) {
        let c = grabData[i];

        if (state == 0) {
            if (!isWS(c)) {
                state = 1;
                i -= 1;
            }
        } else if (state == 1) {
            if (isWS(c)) {
                filenames[filenames.length] = filenameInProgress;
                filenameInProgress = "";
                state = 0;
            } else {
                filenameInProgress += c;
            }
        }
    }

    return filenames;
}

async function toFile(ns, filename, url) {
    await ns.write(filename, "w");
    await ns.wget(url, filename);
}

async function getRepoInfo(ns, cb) {
    let SHA_FILENAME = "githubLatestSHA.txt";
    await toFile(ns, SHA_FILENAME, GITHUB_API_STR);

    let apiResponse = ns.read(SHA_FILENAME);

    let shaStr = "";
    let loop = true;
    for (let i = 12; loop; ++i) {
        if (apiResponse[i] == '"') {
            ns.print("Closing loop on index " + i);
            loop = false;
        } else {
            shaStr += apiResponse[i]
        }
    }

    await ns.rm(SHA_FILENAME);
    cb(shaStr);
}

async function rawFromGithub(ns, filename, commitSha) {

}

async function rawFromGithubSlow(ns, filename) {
    await toFile(ns, filename, REPO_PLAINTEXT_PREFIX + filename);
}

async function cloneGithubRepoSlow(ns) {
    await rawFromGithubSlow(ns, GRAB_FILE);
    if (ns.fileExists(GRAB_FILE)) {
        ns.print("Got grab file!");
        let grabFile = ns.read(TMP_FOLDER + GRAB_FILE);
        let filenames = grabParser(grabFile);

        ns.print("Filenames parsed:");
        for (let i = 0; i < filenames.length; ++i) {
            ns.print(filenames[i]);
            
            await rawFromGithubSlow(ns, filenames[i]);
        }

        await ns.rm(GRAB_FILE);
    }
}

/** @param {NS} ns **/
export async function main(ns) {
    await getRepoInfo(ns, function(shaStr) {
        ns.print(shaStr);
    });
    while (true) {
        await ns.sleep(1000);
    }
}